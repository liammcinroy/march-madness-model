# train_models.py
# This uses the data as generated by featuregen.py to train different models
# Developed by Liam McInroy on 11.30.18

import argparse
import pickle

import numpy as np


def train_naive_bayes(data):
    """Train a naive bayesian model on the given features data

    Arguments:
        data: The features generated by featuregen.py to train from
    """
    return NotImplementedError()


def train_temporal_bayes(data):
    """Train a bayesian model which incorporates recent game results to
    estimate the momentum the team currently has (also could possibly
    marginalize over the momentum lost by player injuries?)

    Arguments:
        data: The features generated by featuregen.py to train from
    """
    return NotImplementedError()


def train_mixture_model(data):
    """Trains a mixture model of both the temporal bayes and naive bayes models

    Arguments:
        data: The features generated by featuregen.py to train from
    """
    return NotImplementedError()


def parse_args():
    """To get the necessary arguments from the command line
    """
    parser = argparse.ArgumentParser(
        description='Training a model and getting an estimated level of '
                    'accuracy using Leave-One-Out cross validation.')
    parser.add_argument('data', type=str,
                        help='The feature and training datasets to train on.')
    parser.add_argument('model', type=str,
                        help='The type of model to train. Can select from TODO')  # noqa TODO add more
    return parser.parse_args()


def main():
    """When called from the command line
    """
    args = parse_args()

    X = np.array((0, 0))
    y = np.array((0, 0))
    with open(args.data, 'rb') as f:
        X, y = pickle.load(f)

    return NotImplementedError()


if __name__ == '__main__':
    main()
